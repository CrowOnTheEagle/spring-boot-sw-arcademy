과제 수행 시 추가 기능이 중요

용어
1. CI/CD
    - 지속적인 통합/배포
2. 터널링
    - 외부에서 공용 IP로 접근 가능하게 하는것
    - 공용 IP는 외부 IP로 연결, 조작하고자 하는 컴퓨터는 외부 IP로 연결해 공용 IP 사용
    - TCP/SSH 터널링
        * 컴퓨터까지 조작하는 터널링
    - http 터널링
        * http에서 사용
3. 포트 포워딩
    - 특정 포트로 들어오면 연결시켜 주는것
4. Annotation
    - @(어노테이션 이름)


도구
1. 도커
    - 운영체제와 관련없이 배포가 가능하게 하는 프로그램
    - 시스템과 상관없이 배포가 가능하게 하는 프로그램
    - jar -> 이미지화 -> 도커 업로드 -> 다른 디바이스에서 이미지 다운로드
    - https://hub.docker.com/explore 에서 이미지를 찾음
    - 이미지
        * 가상 CD로, CD 안의 프로그램을 설치해야 함
    - 컨테이너
        * 배포된 파일, 직접 실행하는 프로그램
        * jar파일 실행을 위한 가상OS(리눅스)가 있음
        * 해당 OS로의 포트포워딩 필요
    - 도커 명령어 실행을 위해선 도커 프로그램이 켜져 있어야 함
    - 명령어
        * docker run: 이미지 실행
        * docker build -t (계정ID이름)/(이미지이름):(버전) .: 이미지 생성
        * docker images: 이미지 확인
        * docker rmi [-f] (이미지ID): 이미지 삭제(-f시 컨테이너까지 삭제)
        * docker push (이미지이름): 이미지 올리는 명령어
        * docker pull (이미지이름): 이미지 받는 명령어
        * docker run --name (컨테이너이름) -dp (포트번호):(포트번호) (계정명)/(배포 이미지 이름):(버전): 이미지 실행
            # -d: 백그라운드에서 실행
            # -p: 포트번호 설정
        * docker ps: 실행중인 컨테이너 목록 확인
    - 도커에 이미지를 올리는 것이 CI
2. git
    - 형상관리 툴
    - 책 4장까지만 참조
    - git bash 터미널 명령어
    - 계정을 두 명이 동시에 쓸 수 없음
    - 명령어
        * git config --global user.email (깃허브 이메일)
            # 이메일 설정
        * git config --global user.name (깃허브 유저 이름)
            # 유저 이름 설정
        * git config --global --list 
            # 전역 변수 확인
            # 윈도우의 자격 증명 관리자 -> windows 자격 증명에서도 확인 가능함
    - actions
        * 깃 내에서 자동으로 작업하는 것
        * .github/workflows/ci.yml 파일 필요
        * push되는 순간 작동
    - 깃허브 actions로 내 리눅스의 ssh에 접속 가능
        * 하지만 학교는 방화벽으로 막혀있어 사용불가
        * 해결법
            # ssh 터널링 이용
            # 대표적인 사이트: serveo, ngrok
3. 젠킨스(jenkins)
    - CI/CD 툴
    - 리눅스에서 설치
        * sudo apt update && sudo apt install -y openjdk-17-jdk
            # 자바 설치(설치되어 있으면 스킵)
        * curl -fsSL https://pkg.jenkins.io/debian-stable/jenkins.io.key | sudo tee \/usr/share/keyrings/jenkins-keyring.asc > /dev/null
            # 젠킨스 공식 홈페이지에서 인증키 받아옴
            # 성공 시 출력 없음
            # 이 과정이 없으면 젠킨스 설치 불가능
        * echo deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] \ https://pkg.jenkins.io/debian-stable binary/ | sudo tee \/etc/apt/sources.list.d/jenkins.list > /dev/null
            # 젠킨스 패캐지를 받아올 곳을 설정
            # 성공 시 출력 없음
        * sudo apt update && sudo apt install jenkins -y
            # 젠킨스 설치
        * sudo systemctl enable jenkins
            # 시스템 시작 시 젠킨스 자동실행
        * sudo systemctl start jenkins
            # 젠킨스 실행
        * sudo systemctl status jenkins
            # 젠킨스 상태 확인
            # active: active면 돌아가는 중
    - 윈도우에서 설치
        * https://www.jenkins.io/download/ 에서 설치 파일 다운로드
    - 젠킨스 언락
        * 브라우저에서 (언락하려는 곳의 주소):8080 에 접속
        * 빨간줄 내 주소 복사하고 sudo cat /var/lib/jenkins/secrets/initialAdminPassword 를 입력해 비밀번호 찾아냄
        * 비밀번호를 복사해 입력
        * install suggested plugins 선택해 모든 플러그인 설치
        * 어드민 계정 입력
            # 계정명, 비밀번호, 이름, 이메일
        * save and continue
        * 주소 저장 후 save and finish
    - 젠킨스 접속
        * (젠킨스가 켜져있는 서버 주소):8080으로 접속 시 사용 가능
        * 로그인은 언락 시 설정한 계정명, 비밀번호 입력
    - 작업추가
        * 새로운 item 클릭 -> 아이템 이름 입력 -> 아이템 타입 선택 -> OK
            # 프리스타일: 튜토리얼에서 씀
            # 파이프라인: 자주 쓰임
    - 작업 설정
        * 아이템 -> configuration(구성) -> pipeline -> definition을 pipeline script from scm으로 변경 -> SCM을 git으로 변경 -> git repository 주소를 복사해 repository URL에 입력
            # 유효한 주소면 아무것도 안뜸
            # 유효하지 않으면 빨간 글씨로 오류가 뜸
        * credentials은 none으로 변경 -> branch specifier을 main으로 변경 -> script path에 젠킨스 실행용 파일 지정(보통 놔둠) -> save
            # jenkinsfile은 레포지토리 폴더 최상단에 생성
    - 작업 수동 시작
        * 아이템에 들어와서 지금 빌드 클릭
        * stage에서 현재 실행중인 단계 확인 가능
    - 도커와 같이 사용 시 도커를 먼저 설치하는게 좋음
4. K8S(Kubernetes, 쿠버네티스)
    - 여러 컨테이너들을 쉽게 관리하게 도와주는 툴
    - 복잡하고 큰 환경에 쓰임
5. argoCD
    - git 배포 기반의 gitops 도구
6. Spring/Spring Boot
    - Spring Boot와는 다름
    - Tomcat이 내장되어 있음
    - /src/resources/application.properties에서 톰캣 관련 속성 수정
    - 생성 방법
        * f1 -> spring initalizer
        * 버전 3.5.4
        * 언어 자바
        * group id: 프로젝트 식별용 그룹 or 패캐지 이름
        * artifact id: 프로젝트 식별자
        * packaging type jar
        * java version 17
        * 의존성(sw 아카데미용)
            # spring boot devtool
            # spring web
        * 프로젝트 저장 경로 선택
7. Mobaxterm
    - 리눅스 서버 원격접속 툴
    - https://mobaxterm.mobatek.net/download-home-edition.html
    - 실행 -> 세션 -> ssh -> remote host에 접속하려는 서버 이름 입력 -> 포트번호 입력 -> 이후 yes
8. putty
    - 리눅스 서버 원격 접속 툴
9. WSL
    - 윈도우 내 리눅스 실행프로그램
    - 윈도우 버전 10.0.19042부터 설치가능
    - wsl --set-default-version 2 -> wsl --install
    - wsl.exe -d Ubuntu 로 실행
10. SSH
    - secure shell
    - 윈도우에서 리눅스 원격접속하는 명령어
    - ssh blizkrig553@localhost -p 22
    - 리눅스에서 포트포워딩 필요
    - 비밀번호 입력 스킵방법
        * 파워쉘/bash -> ssh-keygen -> 엔터 세번 -> 아래 위치에 id_파일 2개가 생성
            # 윈도우 - C:\Users\Administrator\.ssh
            # 리눅스 - ~/.ssh
        * 확장자 없는게 개인키, .pub파일이 공개키
        * type %USERPROFILE%\.ssh\id_ed25519.pub | ssh blizkrig553@localhost "mkdir -p ~/.ssh && cat >> ~/.ssh/authorized_keys && chmod 700 ~/.ssh && chmod 600 ~/.ssh/authorized_keys"
        * 공개키 복사
            # ssh-copy-id (복사될 유저이름)@(복사될 ip)
11. sourcetree
    - git gui
    - https://www.sourcetreeapp.com/ 에서 다운
    - 설치
        * bitbucket은 스킵 -> mercurial 체크 해제 -> 깃허브 이름/이메일 자동입력되어 있음(안돼있으면 직접 입력) -> ssh 키 아니오(안불러오기)
        * 앱 열기 -> 원격 -> 계정추가 -> 아래 정보 입력
            # 호스팅 github
            # 선호 프로토콜 https
            # 인증 oauth
            # oauth 토큰 새로고침 클릭해 깃허브와 연돌
            # 연동 성공 시 인증 성공이라고 뜸
        * 확인 누르면 깃허브과 연동이 됨
    - 레포지토리 생성
        * 생성 -> 깃허브에 업로드 할 폴더 경로 입력 -> 이미 있는 폴더라고 뜨면 yes 누름 -> 생성 완료
    - 브랜치 옆에 동그라미 표시가 있는 곳이 현재 헤드
    - 사용법
        * 업로드 필요한 파일 스테이지에 업로드 -> 커밋 내용 입력 -> 커밋
            # 스테이지에 올라가지 않은 모든 파일은 git에 업로드 되지 않음
        * 기존 레포지토리와 연결
            # 레포지토리를 git 홈페이지에서 생성 후 소스트리에서 설정 -> 원격 -> 추가 -> 디폴트 원격 클릭 -> 생성된 리포지토리 링크를 URL/경로에 입력 -> 확인
        * 푸시
            # push -> 브랜치 선택 후 push
        * 클론
            # 클론 -> 깃 주소 입력 -> 목적지 경로에 저장할 폴더 입력
        * 이전 버전으로 되돌리기
            # history탭에서 되돌리고 싶은 버전 더블클릭
        * 브랜치
            # 분기하고 싶은 버전에 우클릭 -> 브랜치 -> 새 브랜치 이름 입력하고 생성
        * 병합
            # 병합하는쪽에 헤더를 위치 -> 병합할 분기 우클릭 -> 병합 -> fastfoward 체크 -> 병합
    - 기존 레포지토리 추가
        * 추가 -> 작업경로에 기존에 작업하던 레포지토리 위치 추가 -> 추가 버튼 클릭
12. 메이븐
    - 자바 프로젝트 관리도구
    - https://mvnrepository.com/ 에서 의존성(dependancy) 다운
13. vagrant
    - 가상머신 자동화도구
    - https://developer.hashicorp.com/vagrant/install 에서 설치
    - https://portal.cloud.hashicorp.com/vagrant/discover 에서 harsicorp-edu 검색
        * hashicorp-education/ubuntu-24-04
    - Vagrantfile 설정 후 vagrant up 명령어 입력하면 세팅 시작
    - 세팅 완료 후 작업 보고싶으면 세팅된 가상머신 더블클릭
        * 닫을 때에는 계속 배경에서 실행 클릭
    - 명령어
        * vagrant up: 가상머신 시작
            # 가상머신이 없으면 다운로드 받음
            # up시 private key에서 멈춘 경우 ^C 누르고 재시작
        * vagrant ssh (접속할 컴퓨터 이름): vagrnat 접속
            # ssh vagrant@(접속할 컴퓨터 IP) -p (포트번호)로도 접속 가능
            # ssh로 접속하면 비밀번호는 vagrant
        * vagrant halt: vagrant 종료
        * vagrant status: 상태보기
            # default에서 실행 중인것 확인
        * vagrant destroy -f: 버츄얼 박스에서 삭제
        * vagrant snapshot save (스냅샷 이름): 스냅샷 저장
        * vagrant snapshot restore (스냅샷 이름): 스냅샷 복구
            # --no-start
                & 복구 후 강제시작 방지
        * vagrant snapshot delete (스냅샷 이름): 스냅샷 삭제
    - 버츄얼박스에서 실행중인 vagrant를 종료시키 않도록 조심
        * 만약 버츄얼 박스에서 종료했으면 vagrant halt 명령어로 종료
    - 만약 버츄얼 박스 여러개를 동시에 세팅중에 멈춘경우
        * vagrant halt 이후 vagrant up
14. ansible
    - 여러 컴퓨터에 접속해 동시에 작업을 실행시켜주는 도구


리눅스 내 명령어
    - ip a(ddr)
        * 자기 자신 주소 보기
    - sudo usermod [플래그] (프로그램 이름) (유저이름)
        * 유저가 sudo 없이 프로그램을 쓰게 해주는 명령어
        * -aG를 주로 씀
            # -a: 기존거에 더해서 부여
            # -G: 그룹 지정
    - sudo apt-get update
        * 패캐지 업데이트 내용 불러옴
    - sudo apt-get upgrade -y
        * 패캐지 업데이트
        * -y가 없으면 확인이 필요한 항목마다 yes를 눌러줘야 함
    - df
        * 모든 디스크 사용량
        * -h
            # 읽기 쉬운 단위로 출력
    - du
        * 특정 디스크 사용량
        * 인자는 df와 동일
    - free
        * 메모리 사용량
        * -h
            # 읽기 쉬운 단위로 출력
    - swapoff
        * 스왑 메모리 사용 안함
        * -a
            # 모든 스왑 메모리 사용 안함
        * -s
            # 스왑 메모리 상태 출력
    - swapon
        * 스왑 메모리 사용
        * 인자는 swapoff와 동일
    - sudo lvextend -l +100%FREE /dev/mapper/ubuntu--vg-ubuntu--lv && sudo resize2fs /dev/mapper/ubuntu--vg-ubuntu--lv
        * 디스크 용량 리사이즈 명령어
    - which (명령어)
        * 명령어의 위치를 알려줌
        * 주로 설치가 정상적으로 되었는지 확인하기 위해 사용
        * -a
            # 모든 위치에서 찾음
    - whereis (명령어)
        * 명령어의 실행/소스/man 페이지 파일을 찾아줌
    - locate (파일명)
        * 파일명과 일치하는 패턴/파일명이 위치하는 곳을 알려줌
    - systemctl (명령) (서비스)
        * 서비스 제어와 관련한 명령어
        * 명령목록
            # status
                & 서비스의 현재 상태를 봄
            # enable
                & 시스템 시작 시 해당 서비스 자동실행
            # disable
                & 시스템 시작 시 해당 서비스 자동실행 중단
            # start
                & 해당 서비스 시작
            # stop
                & 해당 서비스 중단


VSCode에서 메이븐 빌드 방법
    - https://maven.apache.org/download.cgi 링크에서 바이너리 zip 파일 다운
    - maven 확장 설정을 아래와 같이 적용
        * user settings의 경로를 (다운받은 메이븐 폴더)/conf/settings.xml 위치로 설정
        * excuteable path를 mvn.cmd 혹은 mvnw(.cmd) 파일 위치로 설정
        * 혹은 settings.json 파일에 아래 내용 추가
            # "java.configuration.maven.userSettings": "C:\\spring-boot-sw-arcademy\\apache-maven\\conf\\settings.xml",
            # "maven.executable.path": "C:\\spring-boot-sw-arcademy\\mvnw",
    - 익스플로러 창에 maven 항목 띄우기
    - 프로젝트 우클릭 -> run maven commands -> install
    - jar 파일 위치: root/target/(프로젝트명).jar


VirtualBox 내 포트포워딩 설정
    - 설정 -> export -> 네트워크 -> 포트포워딩 들어가서 아래 정보 입력
    - ./Memos/포트포워딩.png 파일 참고


가상머신 복제
    - 복제할 가상머신 오른쪽 클릭 -> 복제 -> 완전한 복제 -> 완료
    - 리눅스는 잘못되는경우가 많아 복제를 해둬야함

기존 포트 사용중인 오류가 뜰 때
    - cmd에서 netstat -ano | find "LISTEN" | find "[::]:8081"
    - kill pid 혹은 taskkill /f /pid pid 입력


우분투 내 도커 설치
sudo apt-get update;
sudo apt-get install ca-certificates curl gnupg;
sudo install -m 0755 -d /etc/apt/keyrings;
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg;
sudo chmod a+r /etc/apt/keyrings/docker.gpg;
echo \
  "deb [arch="$(dpkg --print-architecture)" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
  "$(. /etc/os-release && echo "$VERSION_CODENAME")" stable" | \
  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
sudo apt-get update;
sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin -y;
- https://docs.docker.com/engine/install/ubuntu/ 참조


docker-compose.yml 구성내용
version: '3'
services:
  order-service:
    ## image name to load
    image: crowontheeagle/spring01-service:latest
    ## ports to open
    ports:
      - "8081:8081"
    ## determin run docker when linux started
    restart: always
- docker compose pull && docker compose up -d


깃허브 토큰 발급
    - 내 프로필 클릭 -> 세팅 -> developer settings -> personal access tokens -> Tokens(classic) -> generate new token -> New personal access token (classic)
    - 아래 정보 입력
        * Note: 토큰 제목, 토큰 생성 목적 입력
        * expiration: 토큰 종료 날짜
        * Select scopes: 토큰의 허용 범위
            # repo: 레포지토리 관련 허용 범위
            # admin:repo_hook
            # delete_repo: 레포지토리를 터미널에서 원격 삭제 가능 여부
    - 필요한 설정 후 generate token -> 생성된 토큰 복사 후 잘 저장


도커 토큰 발급
    - 도커 홈페이지 -> 프로필 클릭 -> account settings -> personal access tokens -> generate new token
    - 아래 정보 입력
        * access token description: 토큰 생성 목적
        * expiration date: 토큰 종료 날짜
        * access permission: 토큰의 허용 범위(보통 read write)
    - 설정 후 generate -> 생성된 토큰 복사 후 저장


깃허브 다른 유저 추가
    - 레포지토리 -> settings -> collaborators -> add people -> 유저 찾아서 클릭 -> add to repository


이클립스 내 깃허브 연동
    - 깃허브에 적용할 레포지토리가 깃허브에 있어야 함
    - 프로젝트 우클릭 -> team -> share project -> use or create..... 체크박스 체크 -> 프로젝트 옆 체크박스 체크 -> create repository 체크박스 체크 -> create repository 클릭 -> 완료
    - window -> show view -> other... -> git -> git staging으로 깃 ui 표시
    - ++버튼 누르면 모든 변경사항들이 stage로 들어감
    - 커밋 메세지 입력 후 commit 또는 commit and push
        * 처음에는 커밋만 해서 주소 설정 들을 해야 함
    - 초기 git 환경설정(첫 푸시)
        * commit -> author와 committer 확인 -> push HEAD -> 아래 설정 입력
            # remote name에 main
            # url에 생성된 레포지토리 입력
                & 입력하면 host, repository path, protocol(https)가 자동으로 선택됨
            # user에 유저이름 입력
            # password에 깃허브 토큰 입력
            # store in secure store 체크박스 체크
        * preview -> preview -> push

깃에서 jar 파일 빌드
    - 사전 설정
        * 레포지토리 -> settings -> actions -> general -> workflow permissions탭 -> read and write permissions 선택 -> allow gitbut actiosn... 체크박스 체크(액션 작동하면서 pull 리퀘스트 가능하게 할건지) -> save
    - 레포지토리가 저장된 폴더에 .gihub/workflows 폴더 생성 후 ci.yml 파일 생성
    - 이클립스의 경우
        * 프로젝트 우클릭 -> properties -> java build path -> source 탭 선택 -> add folder -> 
    - ci.yml 파일에 아래 내용 추가


깃허브 action의 secrets 설정
    - action파일에 직접적으로 아이디/비밀번호를 입력할 수 없으니 secrets을 설정해 아이디/비밀번호를 감춤
    - 깃허브 홈페이지에서 설정
        * 레포지토리 -> settings -> secrets and variables -> actions -> new repository secret -> 아래 정보 입력
            # name에 시크릿 이름
            # secret에 시크릿 내용(password의 경우 토큰)
        * add secret 눌러 종료
    - vscode에서 설정
        * github actions 확장 -> settings -> secrets -> repository secrets 옆에 + 누름 -> 시크릿 이름 입력 -> 시크릿 내용 입력
    - 레포지토리마다 설정해줘야 함


버츄얼 박스 failed to load unit 'cpum' 오류
    - https://story-2.tistory.com/entry/virtualbox-error
    - 안켜지는 이미지 오른쪽 클릭 -> 저장된 상태 삭제 클릭 -> 재시작